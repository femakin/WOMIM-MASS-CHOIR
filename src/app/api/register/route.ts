// import { NextRequest, NextResponse } from 'next/server';

// export async function POST(request: NextRequest) {
//   try {
//     const body = await request.json();
//     const {
//       surname,
//       first_name,
//       contact_address,
//       email,
//       mobile_number,
//       date_of_birth,
//       gender,
//       marital_status,
//       whatsapp_number,
//       social_media_id,
//       is_born_again,
//       holy_ghost_baptism,
//       local_church_name,
//       local_church_address,
//       academic_qualification,
//       job_status,
//       profession,
//       photo
//     } = body;

//     // Validate required fields
//     if (!surname || !first_name || !contact_address || !email || !mobile_number || 
//         !date_of_birth || !gender || !marital_status || !whatsapp_number || 
//         !social_media_id || !is_born_again || !holy_ghost_baptism || 
//         !local_church_name || !local_church_address || !academic_qualification || 
//         !job_status || !profession) {
//       return NextResponse.json(
//         { error: 'All fields are required' },
//         { status: 400 }
//       );
//     }

//     // Here you would typically save to a database
//     // For now, we'll just return a success response
//     const registration = {
//       id: Date.now().toString(),
//       surname,
//       first_name,
//       contact_address,
//       email,
//       mobile_number,
//       date_of_birth,
//       gender,
//       marital_status,
//       whatsapp_number,
//       social_media_id,
//       is_born_again,
//       holy_ghost_baptism,
//       local_church_name,
//       local_church_address,
//       academic_qualification,
//       job_status,
//       profession,
//       photo_url: photo ? 'photo_uploaded' : null,
//       status: 'pending',
//       createdAt: new Date().toISOString(),
//     };

//     // TODO: Save to database (Supabase, PostgreSQL, etc.)
//     console.log('Registration received:', registration);

//     return NextResponse.json(
//       { 
//         message: 'Registration successful!',
//         registration 
//       },
//       { status: 201 }
//     );
//   } catch (error) {
//     console.error('Registration error:', error);
//     return NextResponse.json(
//       { error: 'Internal server error' },
//       { status: 500 }
//     );
//   }
// }

// export async function GET() {
//   return NextResponse.json(
//     { message: 'Registration endpoint is working' },
//     { status: 200 }
//   );
// }



// app/api/register/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/supabase'; // adjust path if different

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const {
      surname,
      first_name,
      contact_address,
      email,
      mobile_number,
      date_of_birth,
      gender,
      marital_status,
      whatsapp_number,
      social_media_id,
      is_born_again,
      holy_ghost_baptism,
      local_church_name,
      local_church_address,
      academic_qualification,
      job_status,
      profession,
      role,       // optional: defaults to "Chorister"
      photo_url,  // frontend should send URL after uploading to Supabase Storage
    } = body;

    // ✅ Validate required fields
    if (
      !surname || !first_name || !contact_address || !email || !mobile_number ||
      !date_of_birth || !gender || !marital_status || !whatsapp_number ||
      !social_media_id || is_born_again === undefined || holy_ghost_baptism === undefined ||
      !local_church_name || !local_church_address || !academic_qualification ||
      !job_status || !profession
    ) {
      return NextResponse.json(
        { error: 'All fields are required' },
        { status: 400 }
      );
    }

    // ✅ Save to Supabase - let database handle registration_number generation
    const newMember = await db.createMember({
      surname,
      first_name,
      contact_address,
      email,
      mobile_number,
      date_of_birth,
      gender,
      marital_status,
      whatsapp_number,
      social_media_id,
      is_born_again,
      holy_ghost_baptism,
      local_church_name,
      local_church_address,
      academic_qualification,
      job_status,
      profession,
      photo_url: photo_url || null,
      status: 'pending',   // default
      role: role || 'Chorister', // default role
      // registration_number will be auto-generated by database trigger
    });

    return NextResponse.json(
      { message: 'Registration successful!', member: newMember },
      { status: 201 }
    );

  } catch (error) {
    console.error('Registration error:', error);
    
    // Handle specific database constraint violations
    if (error && typeof error === 'object' && 'code' in error) {
      const dbError = error as { code: string; message: string };
      
      if (dbError.code === '23505') {
        if (dbError.message.includes('email')) {
          return NextResponse.json(
            { error: 'A member with this email address already exists.' },
            { status: 400 }
          );
        } else if (dbError.message.includes('registration_number')) {
          return NextResponse.json(
            { error: 'Registration number conflict. Please try again.' },
            { status: 400 }
          );
        } else {
          return NextResponse.json(
            { error: 'A member with this information already exists.' },
            { status: 400 }
          );
        }
      }
    }
    
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json(
    { message: 'Registration endpoint is working ✅' },
    { status: 200 }
  );
}
